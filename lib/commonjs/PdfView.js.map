{"version":3,"sources":["PdfView.tsx"],"names":["PdfViewNative","PdfView","props","onError","onLayout","onLoadComplete","onPdfError","event","nativeEvent","onPdfLoadComplete","page","resizeMode","source","style"],"mappings":";;;;;;;AAAA;;AACA;;;;;;AAwEA,MAAMA,aAAa,GAAG,yCAA2C,WAA3C,CAAtB;AAEA;AACA;AACA;;AACO,SAASC,OAAT,CAAiBC,KAAjB,EAAsC;AAC3C,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,QAAX;AAAqBC,IAAAA;AAArB,MAAwCH,KAA9C;AAEA,QAAMI,UAAU,GAAG,wBAChBC,KAAD,IAA6C;AAC3C,QAAIJ,OAAO,IAAI,IAAf,EAAqB;AACnBA,MAAAA,OAAO,CAACI,KAAK,CAACC,WAAP,CAAP;AACD;AACF,GALgB,EAMjB,CAACL,OAAD,CANiB,CAAnB;AAQA,QAAMM,iBAAiB,GAAG,wBACvBF,KAAD,IAAoD;AAClD,QAAIF,cAAc,IAAI,IAAtB,EAA4B;AAC1BA,MAAAA,cAAc,CAACE,KAAK,CAACC,WAAP,CAAd;AACD;AACF,GALuB,EAMxB,CAACH,cAAD,CANwB,CAA1B;AASA,sBACE,6BAAC,aAAD;AACE,IAAA,QAAQ,EAAED,QADZ;AAEE,IAAA,UAAU,EAAEE,UAFd;AAGE,IAAA,iBAAiB,EAAEG,iBAHrB;AAIE,IAAA,IAAI,EAAEP,KAAK,CAACQ,IAJd;AAKE,IAAA,UAAU,EAAER,KAAK,CAACS,UALpB;AAME,IAAA,MAAM,EAAET,KAAK,CAACU,MANhB;AAOE,IAAA,KAAK,EAAEV,KAAK,CAACW;AAPf,IADF;AAWD","sourcesContent":["import React, { useCallback } from 'react';\nimport {\n  LayoutChangeEvent,\n  NativeSyntheticEvent,\n  requireNativeComponent,\n  ViewStyle,\n} from 'react-native';\n\nexport type ErrorEvent = { message: string };\n\nexport type LoadCompleteEvent = { height: number; width: number; base64: string };\n\nexport type ResizeMode = 'contain' | 'fitWidth';\n\ntype PdfViewNativeProps = {\n  onLayout?: (event: LayoutChangeEvent) => void;\n  onPdfError: (event: NativeSyntheticEvent<ErrorEvent>) => void;\n  onPdfLoadComplete: (event: NativeSyntheticEvent<LoadCompleteEvent>) => void;\n  page: number;\n  resizeMode?: ResizeMode;\n  source: string;\n  style?: ViewStyle;\n};\n\ntype PdfViewProps = {\n  /**\n   * Callback to handle errors.\n   */\n  onError?: (event: ErrorEvent) => void;\n\n  /**\n   * Callback for measuring the native view.\n   *\n   * Triggers on mount and layout changes.\n   */\n  onLayout?: (event: LayoutChangeEvent) => void;\n\n  /**\n   * Callback to handle pdf load completion.\n   *\n   * Passed the dimensions of the rendered page.\n   */\n  onLoadComplete?: (event: LoadCompleteEvent) => void;\n\n  /**\n   * Page (0-indexed) of document to display.\n   */\n  page: number;\n\n  /**\n   * How pdf page should be scaled to fit in view dimensions.\n   *\n   * `contain`\n   *   - Center and scale to the largest size that does not crop content.\n   * `fitWidth`\n   *   - Scale pdf page so width matches view. If aspect ratio of the pdf\n   *     does not match the view, content will be cropped/space buffered at\n   *     the bottom.\n   */\n  resizeMode?: ResizeMode;\n\n  /**\n   * Document to display.\n   */\n  source: string;\n  style?: ViewStyle;\n\n  /**\n   * Used to locate this view in end-to-end tests.\n   */\n  testID?: string;\n};\n\nconst PdfViewNative = requireNativeComponent<PdfViewNativeProps>('RNPdfView');\n\n/**\n * Single page of a pdf.\n */\nexport function PdfView(props: PdfViewProps) {\n  const { onError, onLayout, onLoadComplete } = props;\n\n  const onPdfError = useCallback(\n    (event: NativeSyntheticEvent<ErrorEvent>) => {\n      if (onError != null) {\n        onError(event.nativeEvent);\n      }\n    },\n    [onError]\n  );\n  const onPdfLoadComplete = useCallback(\n    (event: NativeSyntheticEvent<LoadCompleteEvent>) => {\n      if (onLoadComplete != null) {\n        onLoadComplete(event.nativeEvent);\n      }\n    },\n    [onLoadComplete]\n  );\n\n  return (\n    <PdfViewNative\n      onLayout={onLayout}\n      onPdfError={onPdfError}\n      onPdfLoadComplete={onPdfLoadComplete}\n      page={props.page}\n      resizeMode={props.resizeMode}\n      source={props.source}\n      style={props.style}\n    />\n  );\n}\n"]}